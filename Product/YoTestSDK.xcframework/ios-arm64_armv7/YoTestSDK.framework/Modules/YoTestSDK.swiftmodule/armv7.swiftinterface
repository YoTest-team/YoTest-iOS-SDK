// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YoTestSDK
import Foundation
import JavaScriptCore
import Swift
import UIKit
import WebKit
import _Concurrency
public protocol YoTestDelegate : AnyObject {
  func onReady(args: [Swift.String : Any])
  func onSuccess(args: [Swift.String : Any])
  func onShow(args: [Swift.String : Any])
  func onError(args: [Swift.String : Any])
  func onClose(args: [Swift.String : Any])
}
@objc final public class YoTest : ObjectiveC.NSObject {
  public struct Auth {
    public init(accessId: Swift.String)
  }
  public static var logLevel: YoTestSDK.YoTest.Log.Level
  public static func registSDK(auth token: YoTestSDK.YoTest.Auth, on result: @escaping (Swift.Bool) -> Swift.Void)
  public static func destroy()
  public struct YTError : Swift.Error {
    public enum Code {
      case requesting
      case unavailable
      public static func == (a: YoTestSDK.YoTest.YTError.Code, b: YoTestSDK.YoTest.YTError.Code) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public let code: YoTestSDK.YoTest.YTError.Code
  }
  weak final public var delegate: YoTestSDK.YoTestDelegate? {
    get
    set
  }
  final public var autoShowLoading: Swift.Bool
  final public var autoShowToast: Swift.Bool
  public init(with delegate: YoTestSDK.YoTestDelegate?) throws
  final public func verify()
  final public func close()
  final public func cancel()
  @objc deinit
}
extension YoTestSDK.YoTest : WebKit.WKNavigationDelegate {
  @objc final public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension YoTestSDK.YoTest {
  @_hasMissingDesignatedInitializers final public class Log {
    public enum Level : Swift.Int {
      case none
      case info
      case error
      case verbose
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    @objc deinit
  }
}
extension YoTestSDK.YoTest.YTError.Code : Swift.Equatable {}
extension YoTestSDK.YoTest.YTError.Code : Swift.Hashable {}
extension YoTestSDK.YoTest.Log.Level : Swift.Equatable {}
extension YoTestSDK.YoTest.Log.Level : Swift.Hashable {}
extension YoTestSDK.YoTest.Log.Level : Swift.RawRepresentable {}
